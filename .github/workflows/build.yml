on:
  push:
    branches: [main]
  workflow_dispatch:
  # cron: weekly

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/workflow/dotfiles/blob/main/.github/workflows/nixos.yml
      - name: "Maximize Disk Space"
        run: |
          sudo rm -rf $AGENT_TOOLSDIRECTORY
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/local/lib/heroku
          sudo rm -rf /var/lib/docker/overlay2
          sudo rm -rf /home/linuxbrew
          sudo rm -rf /home/runner/.rustup
      - name: "Maximize Disk Space ðŸ˜ˆ"
        uses: easimon/maximize-build-space@v8
        with:
          root-reserve-mb: 8192
          swap-size-mb: 1024
          build-mount-path: /nix
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
      - uses: actions/checkout@v4
       # enables flakes, nix-command, sets runner as trusted user
      - uses: DeterminateSystems/nix-installer-action@v12
      - uses: DeterminateSystems/magic-nix-cache-action@main

      # crazy thing, magic-nix-cache runs on top of attic
      # - name: Debugging with browser
      #   uses: fawazahmed0/action-debug@v2
      # https://sourcegraph.com/github.com/osdev-wiki/wiki/-/blob/.github/workflows/sitegen.yml?L43:13-43:25
      - name: cache dependency builds
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/nix/
          key: ${{ runner.os }}
      - run: nix build .#nixosConfigurations.iron.config.system.build.toplevel
      - run: nix build .#homeConfigurations.rithvij.activationPackage
      - run: nix build .#homeConfigurations.rithviz.activationPackage
      - name: keypair for nix-serve and run
        shell: bash
        run: |
          source .github/scripts/nix-serve.sh >/dev/null 2>&1
      - run: nix profile install nixpkgs#cloudflared
      # optionally configure a fixed cloudflare tunnel endpoint (requires login)
      # - name: configure cloudflare tunnel endpoint
      - name: expose nix-serve server
        run: |
          cloudflared tunnel --url http://localhost:5000 > cloudflared.log 2>&1 &
      - run: .github/scripts/loop.sh
        shell: bash
